{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"MCP Anywhere <p>A unified gateway for Model Context Protocol servers</p> <p>Connect your team to your data, on your terms</p> <p>A boilerplate for centralizing auth and hosting</p> Get Started View on GitHub"},{"location":"#what-is-mcp-anywhere","title":"What is MCP Anywhere?","text":"<p>MCP Anywhere acts as an all-in-one solution for accessing the MCP servers your team needs. It eliminates the complexity of managing multiple MCP server connections by providing a unified gateway with centralized configuration and security.</p>"},{"location":"#purpose","title":"PurposeAI-Powered DiscoveryCentralized SecuritySecret File ManagementGranular ControlDocker IsolationMulti-Runtime SupportUniversal Integration","text":"<p>MCP Anywhere acts as an all-in-one area for accessing the MCP servers that your team needs. Instead of managing connections to multiple MCP servers separately, you get:</p> <ul> <li>Centralized API Key Management: Securely connect your API keys to one service, instead of multiple servers</li> <li>Simplified Setup: Removes the hassle of separately connecting every MCP server to Claude, OpenAI, your local Python tools, etc.</li> <li>Selective Tool Access: Limit what tools you want available from each MCP server</li> <li>Unified Interface: Single endpoint for all your MCP tools</li> </ul> <p>Claude AI automatically analyzes GitHub repositories to determine setup requirements, runtime types, and configuration needs</p> <p>Store all API keys and credentials in one secure location with encrypted storage and proper access controls</p> <p>Upload and manage credential files (JSON, PEM, certificates) with AES-128 encryption and automatic container mounting</p> <p>Enable or disable individual tools from each server. Each tool gets a unique prefix to prevent naming conflicts</p> <p>Every MCP server runs in its own isolated Docker container for maximum security and reliability</p> <p>Supports Docker, Node.js (npx), and Python (uvx) runtime environments with automatic detection</p> <p>Connect to Claude Desktop, OpenAI, custom applications, or any MCP-compatible client through a single endpoint</p>"},{"location":"#how-it-works","title":"How It Works","text":""},{"location":"#1-add-a-server","title":"1. Add a Server","text":"<p>Simply provide a GitHub URL to any MCP server repository:</p> <pre><code>https://github.com/modelcontextprotocol/servers\n</code></pre> <p>MCP Anywhere will:</p> <ol> <li>Analyze the repository using Claude AI</li> <li>Detect runtime requirements (Node.js, Python, Docker) </li> <li>Configure environment variables and API keys</li> <li>Make tools available through a unified endpoint</li> </ol>"},{"location":"#2-manage-tools","title":"2. Manage Tools","text":"<ul> <li>View all available tools from your servers</li> <li>Enable/disable tools individually</li> <li>Each tool gets a unique prefix (e.g., <code>abc123_web_search</code>)</li> <li>Configure API keys centrally</li> </ul>"},{"location":"#3-connect-your-client","title":"3. Connect Your Client","text":"<p>Use the unified endpoint with any MCP client:</p> Claude DesktopCommand Line <pre><code>{\n  \"mcpServers\": {\n    \"mcp-anywhere\": {\n      \"command\": \"mcp-anywhere\",\n      \"args\": [\"connect\"]\n    }\n  }\n}\n</code></pre> <pre><code># Start the server\nmcp-anywhere serve http\n\n# Connect as client\nmcp-anywhere connect\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Ready to get started? Follow our simple setup guide:</p> Installation &amp; Setup Deploy to Fly.io <p>Current Version: 0.8.0 (Beta) License: See LICENSE Brought to you by: LOCOMOTIVE Agency</p>"},{"location":"deployment/","title":"Deploy to Fly.io","text":"<p>Deploy MCP Anywhere to Fly.io for a production-ready, cloud-hosted instance with automatic SSL certificates and global availability.</p>"},{"location":"deployment/#why-flyio","title":"Why Fly.io?","text":"<ul> <li>Global edge deployment</li> <li>Automatic SSL certificates  </li> <li>Built-in persistent storage</li> <li>Simple deployment process</li> <li>Free tier available</li> </ul>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>Fly.io account (sign up free)</li> <li>MCP Anywhere repository cloned locally</li> <li>Docker running locally</li> </ul>"},{"location":"deployment/#installation","title":"Installation","text":""},{"location":"deployment/#1-install-fly-cli","title":"1. Install Fly CLI","text":"macOS/LinuxWindows <pre><code>curl -L https://fly.io/install.sh | sh\n</code></pre> <pre><code>iwr https://fly.io/install.ps1 -useb | iex\n</code></pre>"},{"location":"deployment/#2-authenticate","title":"2. Authenticate","text":"<pre><code>fly auth login\n</code></pre>"},{"location":"deployment/#deployment","title":"Deployment","text":""},{"location":"deployment/#1-initialize-your-app","title":"1. Initialize Your App","text":"<pre><code>cd mcp-anywhere\nfly launch\n</code></pre> <p>When prompted:</p> <ul> <li>Choose an app name (e.g., <code>my-mcp-anywhere</code>)</li> <li>Select a region close to you</li> <li>Don't create PostgreSQL or Redis databases</li> <li>Yes to create the app</li> </ul>"},{"location":"deployment/#2-configure-environment-variables","title":"2. Configure Environment Variables","text":"<p>Set required secrets:</p> <pre><code># Generate secure keys\nSECRET_KEY=$(python -c \"import secrets; print(secrets.token_urlsafe(32))\")\n\n# Set secrets\nfly secrets set SECRET_KEY=\"$SECRET_KEY\"\nfly secrets set ANTHROPIC_API_KEY=\"your-anthropic-api-key-here\"\n</code></pre>"},{"location":"deployment/#3-create-persistent-storage","title":"3. Create Persistent Storage","text":"<p>MCP Anywhere needs persistent storage for data:</p> <pre><code># Create a 10GB volume \nfly volumes create mcp_data --size 10\n</code></pre>"},{"location":"deployment/#4-deploy","title":"4. Deploy","text":"<pre><code>fly deploy\n</code></pre> <p>The deployment will:</p> <ol> <li>Build the Docker image</li> <li>Push to Fly's registry</li> <li>Deploy to your selected region</li> <li>Start the application</li> </ol>"},{"location":"deployment/#5-verify-deployment","title":"5. Verify Deployment","text":"<pre><code># Check status\nfly status\n\n# View logs\nfly logs\n\n# Open in browser\nfly open\n</code></pre> <p>Your MCP Anywhere instance is now live at <code>https://your-app-name.fly.dev</code></p>"},{"location":"deployment/#monitoring","title":"Monitoring","text":""},{"location":"deployment/#view-logs","title":"View Logs","text":"<pre><code># Live logs\nfly logs -f\n\n# Recent logs\nfly logs -n 100\n</code></pre>"},{"location":"deployment/#metrics","title":"Metrics","text":"<pre><code># Open metrics dashboard\nfly dashboard metrics\n</code></pre>"},{"location":"deployment/#updating","title":"Updating","text":"<p>To deploy updates:</p> <pre><code># Pull latest changes\ngit pull origin main\n\n# Deploy updates\nfly deploy\n</code></pre>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#app-wont-start","title":"App Won't Start","text":"<pre><code># Check logs for errors\nfly logs -n 200\n\n# Common issues:\n# - Missing environment variables\n# - Docker build failures\n# - Port binding issues\n</code></pre>"},{"location":"deployment/#reset-data","title":"Reset Data","text":"<p>If you need to reset your instance:</p> <pre><code># SSH into instance\nfly ssh console\n\n# Run reset command\n/app/venv/bin/python -m mcp_anywhere reset --confirm\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Get up and running with MCP Anywhere in a few simple steps.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Docker Desktop (for running MCP servers)</li> <li>An Anthropic API key for Claude AI (for auto-configuration)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#1-clone-and-install","title":"1. Clone and Install","text":"<pre><code># Clone repository\ngit clone https://github.com/locomotive-agency/mcp-anywhere.git\ncd mcp-anywhere\n\n# Install with uv (recommended)\nuv sync\n\n# Or install with pip\npip install -e .\n</code></pre>"},{"location":"getting-started/#2-configure-environment","title":"2. Configure Environment","text":"<pre><code># Copy example environment file\ncp env.example .env\n</code></pre> <p>Edit <code>.env</code> with your configuration:</p> <pre><code># Required\nSECRET_KEY=your-secure-random-key-here\nANTHROPIC_API_KEY=your-anthropic-api-key-here\n\n# Optional\nWEB_PORT=8000\nLOG_LEVEL=INFO\n</code></pre> <p>Generate secure keys:</p> <pre><code># Generate SECRET_KEY\npython -c \"import secrets; print(secrets.token_urlsafe(32))\"\n</code></pre>"},{"location":"getting-started/#3-start-mcp-anywhere","title":"3. Start MCP Anywhere","text":"<pre><code># Start HTTP server (includes web UI)\nmcp-anywhere serve http\n\n# Or start STDIO server (for local Claude Desktop)\nmcp-anywhere serve stdio\n</code></pre> <p>The web interface will be available at <code>http://localhost:8000</code></p>"},{"location":"getting-started/#adding-your-first-mcp-server","title":"Adding Your First MCP Server","text":""},{"location":"getting-started/#step-by-step-server-setup","title":"Step-by-Step Server Setup","text":""},{"location":"getting-started/#step-1-access-the-dashboard","title":"Step 1: Access the Dashboard","text":"<p>Open <code>http://localhost:8000</code> in your browser. You'll see the MCP Anywhere homescreen:</p>"},{"location":"getting-started/#step-2-add-a-new-server","title":"Step 2: Add a New Server","text":"<p>Click \"Add Server\" in the top right corner to begin adding an MCP server.</p>"},{"location":"getting-started/#step-3-configure-the-server","title":"Step 3: Configure the Server","text":"<p>Provide the GitHub URL of a public MCP server, for example: <pre><code>https://github.com/ahrefs/ahrefs-mcp-server\n</code></pre></p> <p>MCP Anywhere uses Claude AI to analyze the GitHub repository and determine how the MCP server should be set up. It will automatically create and populate configuration fields for you.</p> <p>Configuration Attributes:</p> <ul> <li>Name: Unique name for the server  </li> <li>Description: Description of the MCP server and its capabilities</li> <li>Runtime Type: Choose from 3 options:<ul> <li>Docker (recommended for security)</li> <li>npx (Node.js)</li> <li>uvx (Python)</li> </ul> </li> <li>Install Commands: Command to install dependencies (leave empty if none)</li> <li>Start Command: Command to start the MCP server</li> <li>Environment Variables: Any API keys or configuration the server needs</li> </ul> <p>As many fields as possible will be automatically populated by Claude's analysis.</p>"},{"location":"getting-started/#step-4-complete-setup","title":"Step 4: Complete Setup","text":"<p>Once you've reviewed the configuration, click \"Add Server\" at the bottom right. The server will be created, built, and added to your dashboard.</p>"},{"location":"getting-started/#managing-your-servers","title":"Managing Your Servers","text":""},{"location":"getting-started/#server-dashboard","title":"Server Dashboard","text":"<p>Once added, servers appear on your homescreen showing:</p> <ul> <li>Server Status: Active/inactive status</li> <li>Available Tools: Number of tools provided by the server  </li> <li>Configuration Details: Runtime type, GitHub URL, and other attributes</li> </ul>"},{"location":"getting-started/#detailed-server-management","title":"Detailed Server Management","text":"<p>Click on any server to view comprehensive details and manage its tools:</p> <p>Status Information:</p> <ul> <li>Server Status: Current operational status</li> <li>Build Status: What step in the build process the server is in</li> </ul> <p>Configuration Details:</p> <ul> <li>Runtime Type: Previously set runtime (Docker/npx/uvx)</li> <li>GitHub URL: Source repository</li> <li>Docker Image: Unique Docker image with suffix identifier</li> <li>Created Date: When the server was set up</li> </ul> <p>Commands:</p> <ul> <li>Install Command: Dependency installation command</li> <li>Start Command: Server startup command</li> </ul> <p>Environment Variables:</p> <ul> <li>All configured environment variables (keys hidden for security)</li> </ul> <p>Secret Files:</p> <ul> <li>Uploaded credential files for secure container mounting</li> </ul>"},{"location":"getting-started/#tool-management","title":"Tool Management","text":"<p>Available Tools Section shows each individual tool provided by the MCP server:</p> <ul> <li>Individual Control: Toggle each tool on/off independently</li> <li>Tool Prefixes: Each server gets a unique prefix (e.g., <code>0123abcd</code>) </li> <li>Tool Naming: Tools are prefixed like <code>0123abcd_tool_name</code> to prevent conflicts</li> </ul>"},{"location":"getting-started/#secret-file-management","title":"Secret File Management","text":"<p>MCP Anywhere supports secure upload and management of credential files for MCP servers that require file-based authentication.</p>"},{"location":"getting-started/#supported-file-types","title":"Supported File Types","text":"<ul> <li>JSON credential files (.json)</li> <li>PEM certificates and keys (.pem, .key, .crt, .cert)</li> <li>PKCS12/PFX certificates (.p12, .pfx)</li> <li>Java KeyStores (.jks, .keystore)</li> <li>Configuration files (.yaml, .yml, .xml, .txt)</li> </ul>"},{"location":"getting-started/#features","title":"Features","text":"<ul> <li>Files encrypted at rest using AES-128 (Fernet)</li> <li>Maximum file size: 10MB</li> <li>Files mounted as read-only volumes in containers</li> <li>Environment variables automatically set with file paths</li> <li>Automatic cleanup when servers are deleted</li> </ul>"},{"location":"getting-started/#upload-process","title":"Upload Process","text":"<ol> <li>Navigate to the server detail page</li> <li>Use the \"Upload Secret File\" form</li> <li>Specify an environment variable name (e.g., <code>GOOGLE_APPLICATION_CREDENTIALS</code>)</li> <li>Upload the credential file</li> <li>File automatically mounts when container starts</li> </ol>"},{"location":"getting-started/#security","title":"Security","text":"<ul> <li>Files stored encrypted in <code>DATA_DIR/secrets/&lt;server_id&gt;/</code></li> <li>Each server has isolated secret storage</li> <li>Files only decrypted when mounting to containers</li> <li>Container access is read-only</li> </ul>"},{"location":"getting-started/#connecting-claude-desktop","title":"Connecting Claude Desktop","text":""},{"location":"getting-started/#1-configure-claude-desktop","title":"1. Configure Claude Desktop","text":"<p>Add to your Claude Desktop configuration:</p> macOSWindows <p>Edit <code>~/Library/Application Support/Claude/claude_desktop_config.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"mcp-anywhere\": {\n      \"command\": \"mcp-anywhere\",\n      \"args\": [\"connect\"]\n    }\n  }\n}\n</code></pre></p> <p>Edit <code>%APPDATA%\\Claude\\claude_desktop_config.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"mcp-anywhere\": {\n      \"command\": \"mcp-anywhere\",\n      \"args\": [\"connect\"]\n    }\n  }\n}\n</code></pre></p>"},{"location":"getting-started/#2-restart-claude-desktop","title":"2. Restart Claude Desktop","text":"<ol> <li>Quit Claude Desktop completely  </li> <li>Restart the application</li> <li>Your MCP tools should now be available</li> </ol>"},{"location":"getting-started/#3-test-your-setup","title":"3. Test Your Setup","text":"<p>In Claude Desktop, ask: \"What MCP tools do I have available?\"</p> <p>Claude should list all enabled tools from your MCP servers with their unique prefixes.</p>"},{"location":"getting-started/#command-line-usage","title":"Command Line Usage","text":"<p>MCP Anywhere provides several CLI commands:</p>"},{"location":"getting-started/#server-commands","title":"Server Commands","text":"<pre><code># Start HTTP server with web UI\nmcp-anywhere serve http\n\n# Start STDIO server for Claude Desktop integration  \nmcp-anywhere serve stdio\n\n# Custom host and port\nmcp-anywhere serve http --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"getting-started/#client-commands","title":"Client Commands","text":"<pre><code># Connect as MCP client (for tool access)\nmcp-anywhere connect\n</code></pre>"},{"location":"getting-started/#data-management","title":"Data Management","text":"<pre><code># Reset all data (removes database, containers, etc.)\nmcp-anywhere reset --confirm\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<p>Docker not running: - Start Docker Desktop - Check with: <code>docker info</code></p> <p>Port already in use: <pre><code># Use different port\nmcp-anywhere serve http --port 8080\n</code></pre></p> <p>API key issues: - Verify <code>ANTHROPIC_API_KEY</code> is set in <code>.env</code> - Ensure your API key has available credits</p> <p>Tools not showing in Claude Desktop: - Restart Claude Desktop after configuration changes - Verify MCP Anywhere is running: <code>curl http://localhost:8000/health</code></p>"},{"location":"getting-started/#popular-mcp-servers-to-try","title":"Popular MCP Servers to Try","text":"Server GitHub URL Description Official MCP Servers <code>https://github.com/modelcontextprotocol/servers</code> Collection of official MCP tools Python Interpreter <code>https://github.com/yzfly/mcp-python-interpreter</code> Execute Python code safely"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Ready for production? Learn how to deploy to Fly.io for a cloud-hosted instance with automatic SSL and global availability.</p> <p>Pro Tip</p> <p>Start with one or two MCP servers to get familiar with the system, then add more as needed. You can always enable/disable individual tools to keep your tool list organized.</p>"}]}